AWSTemplateFormatVersion: 2010-09-09

Parameters:
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro

  KeyName:
    Description: Name of an existing EC2 key pair to allow SSH access to the instances
    Type: "AWS::EC2::KeyPair::KeyName"
  ImageId:
    Type: "AWS::EC2::Image::Id"
    Default: ami-0fa399d9c130ec923

Description: >
  Hi, this is a demo template for creating a nodejs server on a ec2
Resources:
  # creating VPC
  MyTestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: MyTestVpc

  # creating internet gateway (IGW) for the VPC
  MyTestIgw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: my-test-igw

  # connects IGW with VPC
  MyTestAttachIgw:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyTestVpc
      InternetGatewayId: !Ref MyTestIgw

  # create a public subnet
  MyTestVpcSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyTestVpc
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: my-test-vpc-public-subnet

  # create a route table
  MyTestPublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyTestVpc
      Tags:
        - Key: Name
          Value: my-test-public-route-table

  # associate the route table to the public subnet
  MyTestRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref MyTestPublicRouteTable
      SubnetId: !Ref MyTestVpcSubnet

  # add a route entry to IGW into route table
  MyTestInternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref MyTestPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyTestIgw

  # create security group
  MyTestVpcSg:
    Type: AWS::EC2::SecurityGroup
    DependsOn: MyTestVpc
    Properties:
      GroupDescription: SG to test ping
      VpcId: !Ref MyTestVpc
      SecurityGroupIngress:
        # 22 is for ssh
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # icmp is for ping (a network testing program)
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        # 3000 is for next-js webapp
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
  MyTestEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - Ref: MyTestVpcSg
          SubnetId: !Ref MyTestVpcSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash 
          set -ex
          yum update -y && yum install git nodejs -y
          git clone https://github.com/spoudeluno/Assignment8.git
          cd Demo
          npm i
          npm i pm2 -g
          npx prisma migrate reset --force && npx prisma migrate dev --name init
          npm run build 
          pm2 start npm -- start
          EOF

Outputs:
  MyTestVpc:
    Description: MyTestVpc
    Value: !Ref MyTestVpc
    Export:
      Name: MyTestVpc-ID
  WebsiteURL:
    Description: URL for newly created nextjs app
    Value: !Join
      - ""
      - - "http://"
        - !GetAtt
          - MyTestEc2Instance
          - PublicDnsName
        - ":3000"
